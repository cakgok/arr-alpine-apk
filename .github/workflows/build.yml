name: Auto-build arr APKs

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Specific app to build'
        type: choice
        default: all
        options:
          - all
          - bazarr
          - sonarr
          - radarr
          - prowlarr

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  ARCHES: '["x86_64", "aarch64"]'
  APPS_CONFIG: |
    {
      "bazarr":  { "upstream": "morpheus65535/bazarr",  "description": "Subtitle management" },
      "sonarr":  { "upstream": "Sonarr/Sonarr",         "description": "TV series management" },
      "radarr":  { "upstream": "Radarr/Radarr",         "description": "Movie management"   },
      "prowlarr":{ "upstream": "Prowlarr/Prowlarr",     "description": "Indexer management" }
    }

jobs:
  detect-updates:
    runs-on: ubuntu-latest
    outputs:
      apps_matrix: ${{ steps.check-apps.outputs.apps_matrix }}
      has_updates: ${{ steps.check-apps.outputs.has_updates }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Check for app updates
      id: check-apps
      env:
        SELECTED_APP: ${{ github.event.inputs.app_name || 'all' }}
      run: bash ./scripts/check-apps.sh

  # Update APKBUILDs and commit changes
  update-apkbuilds:
    needs: detect-updates
    if: needs.detect-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect-updates.outputs.apps_matrix) }}
      max-parallel: 1
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update APKBUILD for ${{ matrix.app }}
      run: |
        set -e
        
        apkbuild_path="${{ matrix.app }}/APKBUILD"
        new_version="${{ matrix.version }}"
        
        echo "Updating $apkbuild_path to version $new_version"
        
        # Update version and reset release number
        sed -Ei \
          -e "s/^pkgver=.*/pkgver=${new_version}/" \
          -e "s/^pkgrel=.*/pkgrel=0/" \
          "$apkbuild_path"

        # Update checksums using Alpine container
        docker run --rm \
          -v "$PWD/${{ matrix.app }}":/work -w /work \
          alpine:edge sh -euo pipefail -c \
            'apk add --no-cache alpine-sdk && abuild checksum'

    - name: Commit & tag
      run: |
        set -euo pipefail
        git config --global user.name  "Auto-APK CI"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git add "${{ matrix.app }}/APKBUILD"
        git commit -m "${{ matrix.app }}: bump to v${{ matrix.version }}"

        # push branch first, then tag, then push tags
        git push origin HEAD:${{ github.ref_name }}
        git tag -a "${{ matrix.app }}-v${{ matrix.version }}" -m "Release ${{ matrix.app }} v${{ matrix.version }}"
        git push --tags

  # Build APKs for updated apps
  build-apks:
    needs: [detect-updates, update-apkbuilds]
    if: needs.detect-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        app_data: ${{ fromJSON(needs.detect-updates.outputs.apps_matrix) }}
        arch:     ${{ fromJSON('["x86_64","aarch64"]') }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Enable multi-arch emulation
      uses: docker/setup-qemu-action@v3

    - name: Validate secrets
      run: |
        if [ -z "${{ secrets.ABUILD_KEY_NAME }}" ] || [ -z "${{ secrets.ABUILD_PRIVATE_KEY }}" ]; then
          echo "Missing required secrets: ABUILD_KEY_NAME and ABUILD_PRIVATE_KEY"
          exit 1
        fi

    - name: Build APK for ${{ matrix.app_data.app }} on ${{ matrix.arch }}
      env:
        KEY_NAME: ${{ secrets.ABUILD_KEY_NAME }}
        PRIVATE_KEY: ${{ secrets.ABUILD_PRIVATE_KEY }}
        ARCH: ${{ matrix.arch }}
        APP_NAME: ${{ matrix.app_data.app }}
      run: |
        set -euo pipefail
        
        # Map GitHub runner arch to Docker platform
        case "$ARCH" in
          x86_64) DOCKER_ARCH=amd64 ;;
          aarch64) DOCKER_ARCH=arm64 ;;
          *) DOCKER_ARCH=$ARCH ;;
        esac
        
           docker run --rm \
          --platform=linux/${DOCKER_ARCH} \
          -e KEY_NAME \
          -e PRIVATE_KEY \
          -e ARCH \
          -e APP_NAME \
          -v "$PWD/${APP_NAME}":/work \
          alpine:edge sh -euo pipefail -c '
            # 1. Setup environment and builder user
            apk add --no-cache alpine-sdk
            adduser -D builder
            addgroup builder abuild

            # 2. Setup signing keys in the builder''s home directory
            mkdir -p /home/builder/.abuild
            printf "%s\n" "$PRIVATE_KEY" > /home/builder/.abuild/$KEY_NAME
            chmod 600 /home/builder/.abuild/$KEY_NAME
            chown -R builder:abuild /home/builder
            
            # 3. Create public key for apk
            openssl rsa -in /home/builder/.abuild/$KEY_NAME -pubout \
                    -out /etc/apk/keys/${KEY_NAME}.pub

            # 4. Give builder ownership of the work directory
            chown -R builder:abuild /work

            # 5. Create a dedicated build script to be run by the builder
            #    Using a quoted heredoc `<<'"'"'BUILDSCRIPT'"'"'` prevents the outer shell
            #    from expanding variables like $HOME before they are written.
            cat > /tmp/build.sh <<'"'"'BUILDSCRIPT'"'"'
            set -euxo pipefail
            
            echo "--- SCRIPT STARTED ---"
            echo "Running as user: $(id)"
            echo "HOME directory is: $HOME"
            echo "Working directory is: $(pwd)"
            echo "Contents of /work:"
            ls -la /work

            echo "--- Starting abuild ---"
            cd /work
            abuild checksum
            abuild -r
            echo "--- abuild finished ---"
            
            BUILDSCRIPT

            chmod +x /tmp/build.sh

            # 6. Execute the entire script as the builder user with a clean login shell
            #    This is the most reliable way to ensure a correct environment.
            su -l builder -c "/tmp/build.sh"

            # 7. Copy artifacts out (this part runs as root, which is fine)
            echo "--- Copying artifacts ---"
            outdir=/work/out
            mkdir -p "$outdir"
            find /home/builder/packages -type f -path "*/${ARCH}/*.apk" \
                -exec cp {} "$outdir"/ \;
            [ -n "$(ls -A "$outdir")" ] || { echo "No APKs produced"; exit 1; }
            echo "--- Done ---"
          '


    - name: Upload ${{ matrix.app_data.app }} ${{ matrix.arch }} artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app_data.app }}-${{ matrix.arch }}-apks
        path: ${{ matrix.app_data.app }}/out/*.apk
        retention-days: 30

  create-releases:
    needs: build-apks
    if: needs.detect-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect-updates.outputs.apps_matrix) }}

    steps:
    - name: Download ${{ matrix.app }} artifacts (both arches)
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ matrix.app }}-*          # matches bazarr-x86_64-apks etc.
        path: artifacts
        merge-multiple: true

    - name: List downloaded APKs
      run: |
        echo "::group::Artifacts for ${{ matrix.app }}"
        find artifacts -name '*.apk' -printf '%P\n'
        echo "::endgroup::"

    - name: Create GitHub release
      uses: softprops/action-gh-release@v2
      with:
        tag_name:  ${{ matrix.app }}-v${{ matrix.version }}
        name:      "${{ matrix.app }} v${{ matrix.version }} for Alpine"
        draft:     false
        prerelease: false
        files:     artifacts/*.apk
        body: |
          ## ${{ matrix.app }} v${{ matrix.version }}

          **${{ matrix.description }}**

          Alpine Linux APK packages for multiple architectures.

          ### Installation
          ```bash
          apk add --allow-untrusted ${{ matrix.app }}-${{ matrix.version }}-r0.apk
          ```

          ### Architectures
          - x86_64 (amd64)
          - aarch64 (arm64)

          Built automatically from upstream release:  
          https://github.com/${{ matrix.upstream }}/releases/tag/${{ matrix.version }}
