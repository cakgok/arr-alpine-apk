name: Auto-build arr APKs

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Specific app to build'
        type: choice
        default: all
        options:
          - all
          - bazarr
          - sonarr
          - radarr
          - prowlarr

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  ARCHES: '["x86_64", "aarch64"]'
  APPS_CONFIG: |
    {
      "bazarr":  { "upstream": "morpheus65535/bazarr",  "description": "Subtitle management" },
      "sonarr":  { "upstream": "Sonarr/Sonarr",         "description": "TV series management" },
      "radarr":  { "upstream": "Radarr/Radarr",         "description": "Movie management"   },
      "prowlarr":{ "upstream": "Prowlarr/Prowlarr",     "description": "Indexer management" }
    }

jobs:
  detect-updates:
    runs-on: ubuntu-latest
    outputs:
      apps_matrix: ${{ steps.check-apps.outputs.apps_matrix }}
      has_updates: ${{ steps.check-apps.outputs.has_updates }}

    permissions:
      contents: read
      packages: read

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Check for app updates
      id: check-apps
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SELECTED_APP: ${{ github.event.inputs.app_name || 'all' }}
      run: bash ./scripts/check-apps.sh

  # Update APKBUILDs and commit changes
  update-apkbuilds:
    needs: detect-updates
    if: needs.detect-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect-updates.outputs.apps_matrix) }}
      max-parallel: 1
    
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update APKBUILD for ${{ matrix.app }}
      run: |
        set -e
        
        apkbuild_path="${{ matrix.app }}/APKBUILD"
        new_version="${{ matrix.version }}"
        
        echo "Updating $apkbuild_path to version $new_version"
        
        # Update version and reset release number
        sed -Ei \
          -e "s/^pkgver=.*/pkgver=${new_version}/" \
          -e "s/^pkgrel=.*/pkgrel=0/" \
          "$apkbuild_path"

        # Update checksums using Alpine container
        docker run --rm \
          -v "$PWD/${{ matrix.app }}":/work -w /work \
          alpine:edge sh -euo pipefail -c '
            apk add --no-cache alpine-sdk
            adduser -D builder
            addgroup builder abuild
            chown -R builder:abuild /work
            su -l builder -c "cd /work && abuild checksum"
          '
    - name: Commit & tag
      run: |
        set -euo pipefail
        git config --global user.name  "Auto-APK CI"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git add "${{ matrix.app }}/APKBUILD"

        # Commit if there are changes
        if ! git diff --cached --quiet; then
          echo "APKBUILD has been updated. Committing and pushing changes..."
          git commit -m "${{ matrix.app }}: bump to v${{ matrix.version }}"
          git pull --rebase --autostash origin "main"
          git push origin HEAD:"main"
        else
          echo "APKBUILD is already up-to-date. Nothing to commit."
        fi

        # --- FIX: Check if the tag already exists before creating it ---
        TAG_NAME="${{ matrix.app }}-v${{ matrix.version }}"
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists. Skipping tag creation."
        else
          echo "Creating and pushing tag $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release ${{ matrix.app }} v${{ matrix.version }}"
          git push origin "$TAG_NAME" # More efficient to push just the one tag
        fi

  # Build APKs for updated apps
  build-apks:
    needs: [detect-updates, update-apkbuilds]
    if: needs.detect-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        app_data: ${{ fromJSON(needs.detect-updates.outputs.apps_matrix) }}
        arch:     ${{ fromJSON('["x86_64","aarch64"]') }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Enable multi-arch emulation
      uses: docker/setup-qemu-action@v3

    - name: Validate secrets
      run: |
        if [ -z "${{ secrets.KEY_NAME }}" ] || [ -z "${{ secrets.PACKAGER_PRIVKEY }}" ]; then
          echo "Missing required secrets: KEY_NAME and PACKAGER_PRIVKEY"
          exit 1
        fi

    - name: Build APK for ${{ matrix.app_data.app }} on ${{ matrix.arch }}
      env:
        KEY_NAME: ${{ secrets.KEY_NAME }}
        PRIVATE_KEY: ${{ secrets.PACKAGER_PRIVKEY }}
        TARGET_ARCH: ${{ matrix.arch }}
        APP_NAME: ${{ matrix.app_data.app }}
      run: |
        set -euo pipefail

        case "$TARGET_ARCH" in
          x86_64)  DOCKER_ARCH=amd64  ;;
          aarch64) DOCKER_ARCH=arm64  ;;
          *)       echo "Unknown arch $TARGET_ARCH" && exit 1 ;;
        esac
        
        docker run --rm \
          --platform=linux/${DOCKER_ARCH} \
          -e KEY_NAME \
          -e PRIVATE_KEY \
          -e TARGET_ARCH \
          -e APP_NAME \
          -v "$PWD/${APP_NAME}":/work -w /work \
          alpine:edge sh -euo pipefail -c '
            apk add --no-cache alpine-sdk openssl

            adduser -D builder
            addgroup builder abuild
            
            mkdir -p /home/builder/.abuild

            printf "%s\n" "$PRIVATE_KEY" > "/home/builder/.abuild/${KEY_NAME}"
            chmod 600 "/home/builder/.abuild/${KEY_NAME}"
            echo "PACKAGER_PRIVKEY=\"/home/builder/.abuild/${KEY_NAME}\"" > /home/builder/.abuild/abuild.conf
            
            chown -R builder:abuild /home/builder
            chown -R builder:abuild /work # Also ensure work dir is owned by builder

            openssl rsa -in "/home/builder/.abuild/${KEY_NAME}" -pubout -out "/etc/apk/keys/${KEY_NAME}.pub"
            openssl rsa -in "/home/builder/.abuild/${KEY_NAME}" -pubout -out "/home/builder/.abuild/${KEY_NAME}.pub"
            
            chown -R builder:abuild /home/builder
            chown -R builder:abuild /work
        
            echo "### DEBUG: after key generation"
            echo "KEY_NAME = ${KEY_NAME}"
            echo "--- /home/builder/.abuild"
            ls -l /home/builder/.abuild | sed 's/^/   /'
            echo "--- /etc/apk/keys (tail)"
            ls -l /etc/apk/keys | tail -n 5 | sed 's/^/   /'

            echo "### TEST: can builder read the public key?"
            su -l builder -c "cat /home/builder/.abuild/${KEY_NAME}.pub >/dev/null && echo '   ✔ readable' || echo '   ✘ not readable'"


            su -l builder -c "cd /work && abuild checksum"
            su -l builder -c "cd /work && abuild -r"

            out=/work/out && mkdir -p "$out"
            find /home/builder/packages -type f -path "*/${TARGET_ARCH}/*.apk" \
                -exec cp {} "$out"/ \;
            [ -n "$(ls -A "$out")" ] || { echo "No APKs produced"; exit 1; }
          '

    - name: Upload ${{ matrix.app_data.app }} ${{ matrix.arch }} artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app_data.app }}-${{ matrix.arch }}-apks
        path: ${{ matrix.app_data.app }}/out/*.apk
        retention-days: 30

  create-releases:
    needs: build-apks
    if: needs.detect-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect-updates.outputs.apps_matrix) }}

    steps:
    - name: Download ${{ matrix.app }} artifacts (both arches)
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ matrix.app }}-*          # matches bazarr-x86_64-apks etc.
        path: artifacts
        merge-multiple: true

    - name: List downloaded APKs
      run: |
        echo "::group::Artifacts for ${{ matrix.app }}"
        find artifacts -name '*.apk' -printf '%P\n'
        echo "::endgroup::"

    - name: Create GitHub release
      uses: softprops/action-gh-release@v2
      with:
        tag_name:  ${{ matrix.app }}-v${{ matrix.version }}
        name:      "${{ matrix.app }} v${{ matrix.version }} for Alpine"
        draft:     false
        prerelease: false
        files:     artifacts/*.apk
        body: |
          ## ${{ matrix.app }} v${{ matrix.version }}

          **${{ matrix.description }}**

          Alpine Linux APK packages for multiple architectures.

          ### Installation
          ```bash
          apk add --allow-untrusted ${{ matrix.app }}-${{ matrix.version }}-r0.apk
          ```

          ### Architectures
          - x86_64 (amd64)
          - aarch64 (arm64)

          Built automatically from upstream release:  
          https://github.com/${{ matrix.upstream }}/releases/tag/${{ matrix.version }}
